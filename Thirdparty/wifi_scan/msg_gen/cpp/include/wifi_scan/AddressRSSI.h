/* Auto-generated by genmsg_cpp for file /root/ORB_SLAM3/Thirdparty/wifi_scan/msg/AddressRSSI.msg */
#ifndef WIFI_SCAN_MESSAGE_ADDRESSRSSI_H
#define WIFI_SCAN_MESSAGE_ADDRESSRSSI_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wifi_scan
{
template <class ContainerAllocator>
struct AddressRSSI_ {
  typedef AddressRSSI_<ContainerAllocator> Type;

  AddressRSSI_()
  : address()
  , rssi(0.0)
  {
  }

  AddressRSSI_(const ContainerAllocator& _alloc)
  : address(_alloc)
  , rssi(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _address_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  address;

  typedef double _rssi_type;
  double rssi;


  typedef boost::shared_ptr< ::wifi_scan::AddressRSSI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_scan::AddressRSSI_<ContainerAllocator>  const> ConstPtr;
}; // struct AddressRSSI
typedef  ::wifi_scan::AddressRSSI_<std::allocator<void> > AddressRSSI;

typedef boost::shared_ptr< ::wifi_scan::AddressRSSI> AddressRSSIPtr;
typedef boost::shared_ptr< ::wifi_scan::AddressRSSI const> AddressRSSIConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_scan::AddressRSSI_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_scan::AddressRSSI_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_scan

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wifi_scan::AddressRSSI_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wifi_scan::AddressRSSI_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wifi_scan::AddressRSSI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0370cfa607a1c3707a302aa570b15c1c";
  }

  static const char* value(const  ::wifi_scan::AddressRSSI_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0370cfa607a1c370ULL;
  static const uint64_t static_value2 = 0x7a302aa570b15c1cULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_scan::AddressRSSI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_scan/AddressRSSI";
  }

  static const char* value(const  ::wifi_scan::AddressRSSI_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_scan::AddressRSSI_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string address\n\
float64 rssi\n\
\n\
";
  }

  static const char* value(const  ::wifi_scan::AddressRSSI_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_scan::AddressRSSI_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.address);
    stream.next(m.rssi);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct AddressRSSI_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_scan::AddressRSSI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_scan::AddressRSSI_<ContainerAllocator> & v) 
  {
    s << indent << "address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.address);
    s << indent << "rssi: ";
    Printer<double>::stream(s, indent + "  ", v.rssi);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_SCAN_MESSAGE_ADDRESSRSSI_H

